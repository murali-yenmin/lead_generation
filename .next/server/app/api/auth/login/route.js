(()=>{var e={};e.id=7758,e.ids=[7758],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75745:(e,t,r)=>{"use strict";let i;r.d(t,{A:()=>d});var s=r(12518),n=r(85665),a=r.n(n);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env");let o=process.env.MONGODB_URI;i=new s.MongoClient(o,{}).connect();let l=["/dashboard","/socialmedia","/email","/google-ads","/users","/settings","/clients"];(async function(){try{let e=await i,t=process.env.MONGODB_DB;if(!t)throw Error("Please define the MONGODB_DB environment variable in .env");let r=e.db(t),n=r.collection("roles"),o=r.collection("users"),d=r.collection("teams"),c=r.collection("organizations");await n.countDocuments()===0&&(await n.insertMany([{name:"Super Admin",description:"Full platform control",level:100,permissions:l},{name:"Admin",description:"Organization-level admin",level:90,permissions:l},{name:"Organization Owner",description:"Manages own org & billing",level:80,permissions:["/dashboard","/socialmedia","/google-ads"]},{name:"Team Manager",description:"Manages a specific team",level:70,permissions:["/dashboard","/socialmedia"]},{name:"Marketer",description:"Social media & campaigns",level:60,permissions:["/socialmedia","/google-ads"]},{name:"Staff",description:"Basic access",level:50,permissions:["/dashboard"]}]),console.log("✅ Default roles seeded."));let u=await n.findOne({name:"Super Admin"});if(!u)throw Error("Super Admin role not found in roles collection.");if(!await o.findOne({email:"yenmin@gmail.com"})){let e=await a().hash("Yenmin@1234#",10);await o.insertOne({_id:new s.ObjectId,name:"Super Admin",email:"yenmin@gmail.com",password:e,roleId:u._id,organizationId:new s.ObjectId("60f6e1b9b3b3b3b3b3b3b3b3"),teamId:null,status:"active",createdAt:new Date,updatedAt:new Date}),console.log("✅ Default Super Admin user created: yenmin@gmail.com")}await c.updateMany({status:{$exists:!1}},{$set:{status:"active"}}),await d.createIndex({name:1,organizationId:1},{unique:!0}),console.log("✅ Team name index created.")}catch(e){if(85===e.code)console.log("Index already exists, skipping creation.");else if(86===e.code)console.log("Index with different options exists, skipping creation.");else throw console.error("❌ Error during DB initialization:",e),e}})().catch(e=>{console.error("DB Initialization failed. The application may not function correctly."),process.exit(1)});let d=i},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},95155:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>I,routeModule:()=>v,serverHooks:()=>x,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>w});var i={};r.r(i),r.d(i,{POST:()=>g});var s=r(96559),n=r(48088),a=r(37719),o=r(32190),l=r(75745),d=r(85665),c=r.n(d),u=r(43205),p=r.n(u),m=r(12518);async function g(e){try{let{email:t,password:r}=await e.json();if(!t||!r)return o.NextResponse.json({message:"Email and password are required."},{status:400});let i=(await l.A).db(process.env.MONGODB_DB),s=await i.collection("users").findOne({email:t});if(!s||!await c().compare(r,s.password))return o.NextResponse.json({message:"Invalid email or password."},{status:401});if("active"!==s.status)return o.NextResponse.json({message:"Account not activated. Please check your email to verify your account."},{status:403});if(!process.env.JWT_SECRET)throw Error("JWT_SECRET environment variable is not set.");let n=null;s.roleId&&(n=await i.collection("roles").findOne({_id:new m.ObjectId(s.roleId)}));let a=p().sign({id:s._id,email:s.email,roleId:s.roleId,organizationId:s.organizationId,teamId:s.teamId},process.env.JWT_SECRET,{expiresIn:"30d"}),d={id:s._id,name:s.name,email:s.email,roleId:s.roleId,organizationId:s.organizationId,teamId:s.teamId,image:s.image||null,roleName:n?n.name:"N/A",permissions:n?n.permissions:[]};return o.NextResponse.json({message:"Login successful",token:a,expiresIn:"30d",user:d})}catch(e){return console.error("Login API error:",e),o.NextResponse.json({message:"Internal Server Error"},{status:500})}}let v=new s.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/auth/login/route",pathname:"/api/auth/login",filename:"route",bundlePath:"app/api/auth/login/route"},resolvedPagePath:"D:\\murali\\AutoPost-n8n-Lead-Generation-tool\\src\\app\\api\\auth\\login\\route.ts",nextConfigOutput:"",userland:i}),{workAsyncStorage:f,workUnitAsyncStorage:w,serverHooks:x}=v;function I(){return(0,a.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:w})}},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),i=t.X(0,[4447,580,5665,3205],()=>r(95155));module.exports=i})();