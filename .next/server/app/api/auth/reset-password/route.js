(()=>{var e={};e.id=6478,e.ids=[6478],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75745:(e,s,t)=>{"use strict";let r;t.d(s,{A:()=>l});var a=t(12518),n=t(85665),o=t.n(n);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env");let i=process.env.MONGODB_URI;r=new a.MongoClient(i,{}).connect();let d=["/dashboard","/socialmedia","/email","/google-ads","/users","/settings","/clients"];(async function(){try{let e=await r,s=process.env.MONGODB_DB;if(!s)throw Error("Please define the MONGODB_DB environment variable in .env");let t=e.db(s),n=t.collection("roles"),i=t.collection("users"),l=t.collection("teams"),c=t.collection("organizations");await n.countDocuments()===0&&(await n.insertMany([{name:"Super Admin",description:"Full platform control",level:100,permissions:d},{name:"Admin",description:"Organization-level admin",level:90,permissions:d},{name:"Organization Owner",description:"Manages own org & billing",level:80,permissions:["/dashboard","/socialmedia","/google-ads"]},{name:"Team Manager",description:"Manages a specific team",level:70,permissions:["/dashboard","/socialmedia"]},{name:"Marketer",description:"Social media & campaigns",level:60,permissions:["/socialmedia","/google-ads"]},{name:"Staff",description:"Basic access",level:50,permissions:["/dashboard"]}]),console.log("✅ Default roles seeded."));let p=await n.findOne({name:"Super Admin"});if(!p)throw Error("Super Admin role not found in roles collection.");if(!await i.findOne({email:"yenmin@gmail.com"})){let e=await o().hash("Yenmin@1234#",10);await i.insertOne({_id:new a.ObjectId,name:"Super Admin",email:"yenmin@gmail.com",password:e,roleId:p._id,organizationId:new a.ObjectId("60f6e1b9b3b3b3b3b3b3b3b3"),teamId:null,status:"active",createdAt:new Date,updatedAt:new Date}),console.log("✅ Default Super Admin user created: yenmin@gmail.com")}await c.updateMany({status:{$exists:!1}},{$set:{status:"active"}}),await l.createIndex({name:1,organizationId:1},{unique:!0}),console.log("✅ Team name index created.")}catch(e){if(85===e.code)console.log("Index already exists, skipping creation.");else if(86===e.code)console.log("Index with different options exists, skipping creation.");else throw console.error("❌ Error during DB initialization:",e),e}})().catch(e=>{console.error("DB Initialization failed. The application may not function correctly."),process.exit(1)});let l=r},78335:()=>{},96487:()=>{},97629:(e,s,t)=>{"use strict";t.r(s),t.d(s,{patchFetch:()=>f,routeModule:()=>g,serverHooks:()=>x,workAsyncStorage:()=>w,workUnitAsyncStorage:()=>h});var r={};t.r(r),t.d(r,{POST:()=>m});var a=t(96559),n=t(48088),o=t(37719),i=t(32190),d=t(75745),l=t(55511),c=t.n(l),p=t(85665),u=t.n(p);async function m(e){try{let{token:s,password:t}=await e.json();if(!s||!t)return i.NextResponse.json({message:"Token and password are required."},{status:400});if(t.length<8)return i.NextResponse.json({message:"Password must be at least 8 characters long."},{status:400});let r=c().createHash("sha256").update(s).digest("hex"),a=(await d.A).db(process.env.MONGODB_DB).collection("users"),n=await a.findOne({passwordResetToken:r,passwordResetExpires:{$gt:new Date}});if(!n)return i.NextResponse.json({message:"Password reset token is invalid or has expired."},{status:400});let o=await u().hash(t,10);return await a.updateOne({_id:n._id},{$set:{password:o},$unset:{passwordResetToken:"",passwordResetExpires:""}}),i.NextResponse.json({message:"Password has been reset successfully."},{status:200})}catch(e){return console.error("Reset Password API error:",e),i.NextResponse.json({message:"Internal Server Error"},{status:500})}}let g=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/auth/reset-password/route",pathname:"/api/auth/reset-password",filename:"route",bundlePath:"app/api/auth/reset-password/route"},resolvedPagePath:"D:\\murali\\AutoPost-n8n-Lead-Generation-tool\\src\\app\\api\\auth\\reset-password\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:w,workUnitAsyncStorage:h,serverHooks:x}=g;function f(){return(0,o.patchFetch)({workAsyncStorage:w,workUnitAsyncStorage:h})}}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[4447,580,5665],()=>t(97629));module.exports=r})();