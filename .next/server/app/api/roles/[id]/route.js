(()=>{var e={};e.id=4597,e.ids=[4597],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},12909:(e,t,r)=>{"use strict";r.d(t,{n:()=>i});var s=r(43205),n=r.n(s);function i(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return{valid:!1};let r=t.split(" ")[1];if(!r)return{valid:!1};let s=n().verify(r,process.env.JWT_SECRET);return{valid:!0,decoded:s}}catch(e){return console.error("JWT verification failed:",e),{valid:!1}}}},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},49530:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>v,routeModule:()=>p,serverHooks:()=>f,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>g});var s={};r.r(s),r.d(s,{PUT:()=>u});var n=r(96559),i=r(48088),a=r(37719),o=r(32190),l=r(75745),d=r(12909),c=r(12518);async function u(e,{params:t}){if(!(0,d.n)(e).valid)return o.NextResponse.json({message:"Unauthorized"},{status:401});try{let{id:r}=t,{permissions:s}=await e.json();if(!c.ObjectId.isValid(r))return o.NextResponse.json({message:"Invalid role ID"},{status:400});if(!Array.isArray(s))return o.NextResponse.json({message:"Permissions must be an array"},{status:400});let n=(await l.A).db(process.env.MONGODB_DB),i=await n.collection("roles").findOne({_id:new c.ObjectId(r)});if(!i)return o.NextResponse.json({message:"Role not found"},{status:404});if("Super Admin"===i.name)return o.NextResponse.json({message:"Super Admin permissions cannot be changed"},{status:403});let a=await n.collection("roles").updateOne({_id:new c.ObjectId(r)},{$set:{permissions:s,updatedAt:new Date}});if(0===a.matchedCount)return o.NextResponse.json({message:"Role not found"},{status:404});let d=await n.collection("roles").findOne({_id:new c.ObjectId(r)});return o.NextResponse.json(d,{status:200})}catch(e){return console.error("Error updating role:",e),o.NextResponse.json({message:"Internal Server Error"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/roles/[id]/route",pathname:"/api/roles/[id]",filename:"route",bundlePath:"app/api/roles/[id]/route"},resolvedPagePath:"D:\\murali\\lead_generation\\src\\app\\api\\roles\\[id]\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:m,workUnitAsyncStorage:g,serverHooks:f}=p;function v(){return(0,a.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:g})}},55511:e=>{"use strict";e.exports=require("crypto")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75745:(e,t,r)=>{"use strict";let s;r.d(t,{A:()=>d});var n=r(12518),i=r(85665),a=r.n(i);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env");let o=process.env.MONGODB_URI;s=new n.MongoClient(o,{}).connect();let l=["/dashboard","/socialmedia","/email","/google-ads","/users","/settings","/clients"];(async function(){try{let e=await s,t=process.env.MONGODB_DB;if(!t)throw Error("Please define the MONGODB_DB environment variable in .env");let r=e.db(t),i=r.collection("roles"),o=r.collection("users"),d=r.collection("teams"),c=r.collection("organizations");await i.countDocuments()===0&&(await i.insertMany([{name:"Super Admin",description:"Full platform control",level:100,permissions:l},{name:"Admin",description:"Organization-level admin",level:90,permissions:l},{name:"Organization Owner",description:"Manages own org & billing",level:80,permissions:["/dashboard","/socialmedia","/google-ads"]},{name:"Team Manager",description:"Manages a specific team",level:70,permissions:["/dashboard","/socialmedia"]},{name:"Marketer",description:"Social media & campaigns",level:60,permissions:["/socialmedia","/google-ads"]},{name:"Staff",description:"Basic access",level:50,permissions:["/dashboard"]}]),console.log("✅ Default roles seeded."));let u=await i.findOne({name:"Super Admin"});if(!u)throw Error("Super Admin role not found in roles collection.");if(!await o.findOne({email:"yenmin@gmail.com"})){let e=await a().hash("Yenmin@1234#",10);await o.insertOne({_id:new n.ObjectId,name:"Super Admin",email:"yenmin@gmail.com",password:e,roleId:u._id,organizationId:new n.ObjectId("60f6e1b9b3b3b3b3b3b3b3b3"),teamId:null,status:"active",createdAt:new Date,updatedAt:new Date}),console.log("✅ Default Super Admin user created: yenmin@gmail.com")}await c.updateMany({status:{$exists:!1}},{$set:{status:"active"}}),await d.createIndex({name:1,organizationId:1},{unique:!0}),console.log("✅ Team name index created.")}catch(e){if(85===e.code)console.log("Index already exists, skipping creation.");else if(86===e.code)console.log("Index with different options exists, skipping creation.");else throw console.error("❌ Error during DB initialization:",e),e}})().catch(e=>{console.error("DB Initialization failed. The application may not function correctly."),process.exit(1)});let d=s},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[4447,580,5665,3205],()=>r(49530));module.exports=s})();