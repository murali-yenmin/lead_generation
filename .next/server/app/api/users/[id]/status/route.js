(()=>{var e={};e.id=5153,e.ids=[5153],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},12909:(e,t,s)=>{"use strict";s.d(t,{n:()=>i});var r=s(43205),n=s.n(r);function i(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return{valid:!1};let s=t.split(" ")[1];if(!s)return{valid:!1};let r=n().verify(s,process.env.JWT_SECRET);return{valid:!0,decoded:r}}catch(e){return console.error("JWT verification failed:",e),{valid:!1}}}},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75745:(e,t,s)=>{"use strict";let r;s.d(t,{A:()=>d});var n=s(12518),i=s(85665),a=s.n(i);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env");let o=process.env.MONGODB_URI;r=new n.MongoClient(o,{}).connect();let l=["/dashboard","/socialmedia","/email","/google-ads","/users","/settings","/clients"];(async function(){try{let e=await r,t=process.env.MONGODB_DB;if(!t)throw Error("Please define the MONGODB_DB environment variable in .env");let s=e.db(t),i=s.collection("roles"),o=s.collection("users"),d=s.collection("teams"),u=s.collection("organizations");await i.countDocuments()===0&&(await i.insertMany([{name:"Super Admin",description:"Full platform control",level:100,permissions:l},{name:"Admin",description:"Organization-level admin",level:90,permissions:l},{name:"Organization Owner",description:"Manages own org & billing",level:80,permissions:["/dashboard","/socialmedia","/google-ads"]},{name:"Team Manager",description:"Manages a specific team",level:70,permissions:["/dashboard","/socialmedia"]},{name:"Marketer",description:"Social media & campaigns",level:60,permissions:["/socialmedia","/google-ads"]},{name:"Staff",description:"Basic access",level:50,permissions:["/dashboard"]}]),console.log("✅ Default roles seeded."));let c=await i.findOne({name:"Super Admin"});if(!c)throw Error("Super Admin role not found in roles collection.");if(!await o.findOne({email:"yenmin@gmail.com"})){let e=await a().hash("Yenmin@1234#",10);await o.insertOne({_id:new n.ObjectId,name:"Super Admin",email:"yenmin@gmail.com",password:e,roleId:c._id,organizationId:new n.ObjectId("60f6e1b9b3b3b3b3b3b3b3b3"),teamId:null,status:"active",createdAt:new Date,updatedAt:new Date}),console.log("✅ Default Super Admin user created: yenmin@gmail.com")}await u.updateMany({status:{$exists:!1}},{$set:{status:"active"}}),await d.createIndex({name:1,organizationId:1},{unique:!0}),console.log("✅ Team name index created.")}catch(e){if(85===e.code)console.log("Index already exists, skipping creation.");else if(86===e.code)console.log("Index with different options exists, skipping creation.");else throw console.error("❌ Error during DB initialization:",e),e}})().catch(e=>{console.error("DB Initialization failed. The application may not function correctly."),process.exit(1)});let d=r},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},79750:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>v,routeModule:()=>p,serverHooks:()=>f,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>g});var r={};s.r(r),s.d(r,{PATCH:()=>c});var n=s(96559),i=s(48088),a=s(37719),o=s(32190),l=s(75745),d=s(12909),u=s(12518);async function c(e,{params:t}){if(!(0,d.n)(e).valid)return o.NextResponse.json({message:"Unauthorized"},{status:401});try{let{id:s}=t,{status:r}=await e.json();if(!u.ObjectId.isValid(s))return o.NextResponse.json({message:"Invalid user ID"},{status:400});if("active"!==r&&"deactivated"!==r)return o.NextResponse.json({message:"Invalid status value"},{status:400});let n=(await l.A).db(process.env.MONGODB_DB),i=await n.collection("users").findOne({_id:new u.ObjectId(s)});if(!i)return o.NextResponse.json({message:"User not found"},{status:404});let a=await n.collection("roles").findOne({_id:i.roleId});if(a&&"Super Admin"===a.name)return o.NextResponse.json({message:"Cannot change the status of a Super Admin account."},{status:403});let d=await n.collection("users").updateOne({_id:new u.ObjectId(s)},{$set:{status:r,updatedAt:new Date}});if(0===d.matchedCount)return o.NextResponse.json({message:"User not found"},{status:404});let c=await n.collection("users").findOne({_id:new u.ObjectId(s)});return o.NextResponse.json(c,{status:200})}catch(e){return console.error("Error updating user status:",e),o.NextResponse.json({message:"Internal Server Error"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/users/[id]/status/route",pathname:"/api/users/[id]/status",filename:"route",bundlePath:"app/api/users/[id]/status/route"},resolvedPagePath:"D:\\murali\\AutoPost-n8n-Lead-Generation-tool\\src\\app\\api\\users\\[id]\\status\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:m,workUnitAsyncStorage:g,serverHooks:f}=p;function v(){return(0,a.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:g})}},96487:()=>{}};var t=require("../../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[4447,580,5665,3205],()=>s(79750));module.exports=r})();