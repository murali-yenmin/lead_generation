(()=>{var e={};e.id=2408,e.ids=[2408],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},12909:(e,t,r)=>{"use strict";r.d(t,{n:()=>s});var i=r(43205),n=r.n(i);function s(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return{valid:!1};let r=t.split(" ")[1];if(!r)return{valid:!1};let i=n().verify(r,process.env.JWT_SECRET);return{valid:!0,decoded:i}}catch(e){return console.error("JWT verification failed:",e),{valid:!1}}}},27100:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>v,routeModule:()=>p,serverHooks:()=>f,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>g});var i={};r.r(i),r.d(i,{GET:()=>u});var n=r(96559),s=r(48088),a=r(37719),o=r(32190),l=r(75745),c=r(12909),d=r(12518);async function u(e,{params:t}){if(!(0,c.n)(e).valid)return o.NextResponse.json({message:"Unauthorized"},{status:401});try{let{id:e}=t;if(!d.ObjectId.isValid(e))return o.NextResponse.json({message:"Invalid organization ID"},{status:400});let r=(await l.A).db(process.env.MONGODB_DB),i=await r.collection("organizations").findOne({_id:new d.ObjectId(e)});if(!i)return o.NextResponse.json({message:"Organization not found"},{status:404});let n=await r.collection("users").find({organizationId:new d.ObjectId(e)}).project({password:0}).toArray(),s={...i,users:n};return o.NextResponse.json(s,{status:200})}catch(e){return console.error("Error fetching organization:",e),o.NextResponse.json({message:"Internal Server Error"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/organizations/[id]/route",pathname:"/api/organizations/[id]",filename:"route",bundlePath:"app/api/organizations/[id]/route"},resolvedPagePath:"D:\\murali\\lead_generation\\src\\app\\api\\organizations\\[id]\\route.ts",nextConfigOutput:"",userland:i}),{workAsyncStorage:m,workUnitAsyncStorage:g,serverHooks:f}=p;function v(){return(0,a.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:g})}},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75745:(e,t,r)=>{"use strict";let i;r.d(t,{A:()=>c});var n=r(12518),s=r(85665),a=r.n(s);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env");let o=process.env.MONGODB_URI;i=new n.MongoClient(o,{}).connect();let l=["/dashboard","/socialmedia","/email","/google-ads","/users","/settings","/clients"];(async function(){try{let e=await i,t=process.env.MONGODB_DB;if(!t)throw Error("Please define the MONGODB_DB environment variable in .env");let r=e.db(t),s=r.collection("roles"),o=r.collection("users"),c=r.collection("teams"),d=r.collection("organizations");await s.countDocuments()===0&&(await s.insertMany([{name:"Super Admin",description:"Full platform control",level:100,permissions:l},{name:"Admin",description:"Organization-level admin",level:90,permissions:l},{name:"Organization Owner",description:"Manages own org & billing",level:80,permissions:["/dashboard","/socialmedia","/google-ads"]},{name:"Team Manager",description:"Manages a specific team",level:70,permissions:["/dashboard","/socialmedia"]},{name:"Marketer",description:"Social media & campaigns",level:60,permissions:["/socialmedia","/google-ads"]},{name:"Staff",description:"Basic access",level:50,permissions:["/dashboard"]}]),console.log("✅ Default roles seeded."));let u=await s.findOne({name:"Super Admin"});if(!u)throw Error("Super Admin role not found in roles collection.");if(!await o.findOne({email:"yenmin@gmail.com"})){let e=await a().hash("Yenmin@1234#",10);await o.insertOne({_id:new n.ObjectId,name:"Super Admin",email:"yenmin@gmail.com",password:e,roleId:u._id,organizationId:new n.ObjectId("60f6e1b9b3b3b3b3b3b3b3b3"),teamId:null,status:"active",createdAt:new Date,updatedAt:new Date}),console.log("✅ Default Super Admin user created: yenmin@gmail.com")}await d.updateMany({status:{$exists:!1}},{$set:{status:"active"}}),await c.createIndex({name:1,organizationId:1},{unique:!0}),console.log("✅ Team name index created.")}catch(e){if(85===e.code)console.log("Index already exists, skipping creation.");else if(86===e.code)console.log("Index with different options exists, skipping creation.");else throw console.error("❌ Error during DB initialization:",e),e}})().catch(e=>{console.error("DB Initialization failed. The application may not function correctly."),process.exit(1)});let c=i},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),i=t.X(0,[4447,580,5665,3205],()=>r(27100));module.exports=i})();