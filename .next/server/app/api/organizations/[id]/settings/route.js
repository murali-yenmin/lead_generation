(()=>{var e={};e.id=344,e.ids=[344],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10152:(e,t,i)=>{"use strict";i.r(t),i.d(t,{"60f821e6f751cdfd4a15dc0dc1a7f228b71f49b585":()=>s.PATCH});var s=i(83596)},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12518:e=>{"use strict";e.exports=require("mongodb")},12909:(e,t,i)=>{"use strict";i.d(t,{n:()=>n});var s=i(43205),r=i.n(s);function n(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return{valid:!1};let i=t.split(" ")[1];if(!i)return{valid:!1};let s=r().verify(i,process.env.JWT_SECRET);return{valid:!0,decoded:s}}catch(e){return console.error("JWT verification failed:",e),{valid:!1}}}},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},62357:(e,t,i)=>{"use strict";i.r(t),i.d(t,{patchFetch:()=>u,routeModule:()=>o,serverHooks:()=>c,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>l});var s=i(96559),r=i(48088),n=i(37719),a=i(83596);let o=new s.AppRouteRouteModule({definition:{kind:r.RouteKind.APP_ROUTE,page:"/api/organizations/[id]/settings/route",pathname:"/api/organizations/[id]/settings",filename:"route",bundlePath:"app/api/organizations/[id]/settings/route"},resolvedPagePath:"D:\\murali\\lead_generation\\src\\app\\api\\organizations\\[id]\\settings\\route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:d,workUnitAsyncStorage:l,serverHooks:c}=o;function u(){return(0,n.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:l})}},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75745:(e,t,i)=>{"use strict";let s;i.d(t,{A:()=>l});var r=i(12518),n=i(85665),a=i.n(n);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env");let o=process.env.MONGODB_URI;s=new r.MongoClient(o,{}).connect();let d=["/dashboard","/socialmedia","/email","/google-ads","/users","/settings","/clients"];(async function(){try{let e=await s,t=process.env.MONGODB_DB;if(!t)throw Error("Please define the MONGODB_DB environment variable in .env");let i=e.db(t),n=i.collection("roles"),o=i.collection("users"),l=i.collection("teams"),c=i.collection("organizations");await n.countDocuments()===0&&(await n.insertMany([{name:"Super Admin",description:"Full platform control",level:100,permissions:d},{name:"Admin",description:"Organization-level admin",level:90,permissions:d},{name:"Organization Owner",description:"Manages own org & billing",level:80,permissions:["/dashboard","/socialmedia","/google-ads"]},{name:"Team Manager",description:"Manages a specific team",level:70,permissions:["/dashboard","/socialmedia"]},{name:"Marketer",description:"Social media & campaigns",level:60,permissions:["/socialmedia","/google-ads"]},{name:"Staff",description:"Basic access",level:50,permissions:["/dashboard"]}]),console.log("✅ Default roles seeded."));let u=await n.findOne({name:"Super Admin"});if(!u)throw Error("Super Admin role not found in roles collection.");if(!await o.findOne({email:"yenmin@gmail.com"})){let e=await a().hash("Yenmin@1234#",10);await o.insertOne({_id:new r.ObjectId,name:"Super Admin",email:"yenmin@gmail.com",password:e,roleId:u._id,organizationId:new r.ObjectId("60f6e1b9b3b3b3b3b3b3b3b3"),teamId:null,status:"active",createdAt:new Date,updatedAt:new Date}),console.log("✅ Default Super Admin user created: yenmin@gmail.com")}await c.updateMany({status:{$exists:!1}},{$set:{status:"active"}}),await l.createIndex({name:1,organizationId:1},{unique:!0}),console.log("✅ Team name index created.")}catch(e){if(85===e.code)console.log("Index already exists, skipping creation.");else if(86===e.code)console.log("Index with different options exists, skipping creation.");else throw console.error("❌ Error during DB initialization:",e),e}})().catch(e=>{console.error("DB Initialization failed. The application may not function correctly."),process.exit(1)});let l=s},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},83596:(e,t,i)=>{"use strict";i.r(t),i.d(t,{PATCH:()=>d});var s=i(67218);i(79130);var r=i(32190),n=i(75745),a=i(12909),o=i(12518);async function d(e,{params:t}){let i=(0,a.n)(e);if(!i.valid||!i.decoded||"string"==typeof i.decoded||!i.decoded.roleId)return r.NextResponse.json({message:"Unauthorized"},{status:401});try{let s=(await n.A).db(process.env.MONGODB_DB),a=await s.collection("roles").findOne({_id:new o.ObjectId(i.decoded.roleId)});if(!a||!["Super Admin","Admin"].includes(a.name))return r.NextResponse.json({message:"Forbidden"},{status:403});let{id:d}=t,{settings:l}=await e.json();if(!o.ObjectId.isValid(d))return r.NextResponse.json({message:"Invalid organization ID"},{status:400});if(!l)return r.NextResponse.json({message:"Settings object is required"},{status:400});let c={};if(void 0!==l.socialMediaUrl&&(c["settings.socialMediaUrl"]=l.socialMediaUrl),void 0!==l.emailUrl&&(c["settings.emailUrl"]=l.emailUrl),0===Object.keys(c).length)return r.NextResponse.json({message:"No valid settings to update."},{status:400});let u=await s.collection("organizations").updateOne({_id:new o.ObjectId(d)},{$set:{...c,updatedAt:new Date}});if(0===u.matchedCount)return r.NextResponse.json({message:"Organization not found"},{status:404});let p=await s.collection("organizations").findOne({_id:new o.ObjectId(d)});return r.NextResponse.json(p,{status:200})}catch(e){return console.error("Error updating organization settings:",e),r.NextResponse.json({message:"Internal Server Error"},{status:500})}}(0,i(17478).D)([d]),(0,s.A)(d,"60f821e6f751cdfd4a15dc0dc1a7f228b71f49b585",null)},96487:()=>{}};var t=require("../../../../../webpack-runtime.js");t.C(e);var i=e=>t(t.s=e),s=t.X(0,[4447,580,6724,5665,3205,6212],()=>i(62357));module.exports=s})();